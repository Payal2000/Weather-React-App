{"ast":null,"code":"var _jsxFileName = \"/Users/payalnagaonkar/Desktop/react-weather-app/src/context/WeatherContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport cityData from \"../data/cities_of_turkey.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/createContext();\nexport const WeatherProvider = _ref => {\n  _s();\n  var _selected$initialvalu, _selected$initialvalu2, _selected$initialvalu3, _selected$initialvalu4;\n  let {\n    children\n  } = _ref;\n  const [cities, setCities] = useState([]);\n  const [selected, setSelected] = useState({\n    id: 1,\n    name: \"Adana\",\n    latitude: \"37.0000\",\n    longitude: \"35.3213\",\n    population: 2183167,\n    region: \"Akdeniz\",\n    icon: \"\"\n  });\n  const [weathers, setWeathers] = useState({});\n  const [unit, setUnit] = useState(\"metric\");\n  const values = {\n    cities,\n    setCities,\n    selected,\n    setSelected,\n    weathers,\n    setWeathers,\n    unit,\n    setUnit\n  };\n\n  // const apiKey = \"4327f11f6458df3e888e99c6b054069c\";\n\n  //console.log(weathers?.current?.weather?.[0].icon);\n\n  function getCities() {\n    setCities(cityData);\n  }\n  const citylat = selected !== null && selected !== void 0 && (_selected$initialvalu = selected.initialvalues) !== null && _selected$initialvalu !== void 0 && _selected$initialvalu[0].latitude ? selected === null || selected === void 0 ? void 0 : (_selected$initialvalu2 = selected.initialvalues) === null || _selected$initialvalu2 === void 0 ? void 0 : _selected$initialvalu2[0].latitude : selected.latitude;\n  const citylon = selected !== null && selected !== void 0 && (_selected$initialvalu3 = selected.initialvalues) !== null && _selected$initialvalu3 !== void 0 && _selected$initialvalu3[0].longitude ? selected === null || selected === void 0 ? void 0 : (_selected$initialvalu4 = selected.initialvalues) === null || _selected$initialvalu4 === void 0 ? void 0 : _selected$initialvalu4[0].longitude : selected.longitude;\n  useEffect(() => {\n    fetch(`http://api.openweathermap.org/geo/1.0/direct?q=London&limit=5&appid={f09b439be9b5ae3c4a67c2e58f8dd582y}`).then(response => response.json()).then(data => setWeathers(data));\n    return;\n  }, [selected, unit]);\n  useEffect(() => {\n    getCities();\n    return;\n  }, [unit]);\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherProvider, \"FjZJKbvO7wIuT1wJWEhHybKhJR0=\");\n_c = WeatherProvider;\nexport const useWeather = () => {\n  _s2();\n  return useContext(WeatherContext);\n};\n_s2(useWeather, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","cityData","WeatherContext","WeatherProvider","children","cities","setCities","selected","setSelected","id","name","latitude","longitude","population","region","icon","weathers","setWeathers","unit","setUnit","values","getCities","citylat","initialvalues","citylon","fetch","then","response","json","data","useWeather"],"sources":["/Users/payalnagaonkar/Desktop/react-weather-app/src/context/WeatherContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport cityData from \"../data/cities_of_turkey.json\";\n\nconst WeatherContext = createContext();\n\nexport const WeatherProvider = ({ children }) => {\n  const [cities, setCities] = useState([]);\n  const [selected, setSelected] = useState({\n    id: 1,\n    name: \"Adana\",\n    latitude: \"37.0000\",\n    longitude: \"35.3213\",\n    population: 2183167,\n    region: \"Akdeniz\",\n    icon: \"\",\n  });\n  const [weathers, setWeathers] = useState({});\n  const [unit, setUnit] = useState(\"metric\");\n\n  const values = {\n    cities,\n    setCities,\n    selected,\n    setSelected,\n    weathers,\n    setWeathers,\n    unit,\n    setUnit,\n  };\n\n  // const apiKey = \"4327f11f6458df3e888e99c6b054069c\";\n\n  //console.log(weathers?.current?.weather?.[0].icon);\n\n  function getCities() {\n    setCities(cityData);\n  }\n\n  const citylat = selected?.initialvalues?.[0].latitude\n    ? selected?.initialvalues?.[0].latitude\n    : selected.latitude;\n\n  const citylon = selected?.initialvalues?.[0].longitude\n    ? selected?.initialvalues?.[0].longitude\n    : selected.longitude;\n\n  useEffect(() => {\n    fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=London&limit=5&appid={f09b439be9b5ae3c4a67c2e58f8dd582y}`\n    )\n      .then((response) => response.json())\n      .then((data) => setWeathers(data));\n    return;\n  }, [selected, unit]);\n\n  useEffect(() => {\n    getCities();\n    return;\n  }, [unit]);\n\n  return (\n    <WeatherContext.Provider value={values}>{children}</WeatherContext.Provider>\n  );\n};\n\nexport const useWeather = () => useContext(WeatherContext);\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAOC,QAAQ,MAAM,+BAA+B;AAAC;AAErD,MAAMC,cAAc,gBAAGL,aAAa,EAAE;AAEtC,OAAO,MAAMM,eAAe,GAAG,QAAkB;EAAA;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC;IACvCU,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,SAAS;IACnBC,SAAS,EAAE,SAAS;IACpBC,UAAU,EAAE,OAAO;IACnBC,MAAM,EAAE,SAAS;IACjBC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,QAAQ,CAAC;EAE1C,MAAMqB,MAAM,GAAG;IACbf,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,WAAW;IACXQ,QAAQ;IACRC,WAAW;IACXC,IAAI;IACJC;EACF,CAAC;;EAED;;EAEA;;EAEA,SAASE,SAAS,GAAG;IACnBf,SAAS,CAACL,QAAQ,CAAC;EACrB;EAEA,MAAMqB,OAAO,GAAGf,QAAQ,aAARA,QAAQ,wCAARA,QAAQ,CAAEgB,aAAa,kDAAvB,sBAA0B,CAAC,CAAC,CAACZ,QAAQ,GACjDJ,QAAQ,aAARA,QAAQ,iDAARA,QAAQ,CAAEgB,aAAa,2DAAvB,uBAA0B,CAAC,CAAC,CAACZ,QAAQ,GACrCJ,QAAQ,CAACI,QAAQ;EAErB,MAAMa,OAAO,GAAGjB,QAAQ,aAARA,QAAQ,yCAARA,QAAQ,CAAEgB,aAAa,mDAAvB,uBAA0B,CAAC,CAAC,CAACX,SAAS,GAClDL,QAAQ,aAARA,QAAQ,iDAARA,QAAQ,CAAEgB,aAAa,2DAAvB,uBAA0B,CAAC,CAAC,CAACX,SAAS,GACtCL,QAAQ,CAACK,SAAS;EAEtBZ,SAAS,CAAC,MAAM;IACdyB,KAAK,CACF,yGAAwG,CAC1G,CACEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKZ,WAAW,CAACY,IAAI,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,CAACtB,QAAQ,EAAEW,IAAI,CAAC,CAAC;EAEpBlB,SAAS,CAAC,MAAM;IACdqB,SAAS,EAAE;IACX;EACF,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEV,oBACE,QAAC,cAAc,CAAC,QAAQ;IAAC,KAAK,EAAEE,MAAO;IAAA,UAAEhB;EAAQ;IAAA;IAAA;IAAA;EAAA,QAA2B;AAEhF,CAAC;AAAC,GA1DWD,eAAe;AAAA,KAAfA,eAAe;AA4D5B,OAAO,MAAM2B,UAAU,GAAG;EAAA;EAAA,OAAMhC,UAAU,CAACI,cAAc,CAAC;AAAA;AAAC,IAA9C4B,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}